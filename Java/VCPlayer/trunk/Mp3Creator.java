/*
 * Mp3Creator.java
 *
 * Created on 2004年9月4日, 下午9:41
 */

package VCPlayer;
import javax.swing.*;
import	java.io.File;
import	java.io.IOException;

import	javax.sound.sampled.AudioFileFormat;
import	javax.sound.sampled.AudioFormat;
import	javax.sound.sampled.AudioInputStream;
import	javax.sound.sampled.AudioSystem;

/*
 *	Currently, there is no convenient method in Java Sound to specify non-standard Encodings.
 *      http://www.tritonus.org/plugins.html for plugins.
 */
import	org.tritonus.share.sampled.AudioFileTypes;
import	org.tritonus.share.sampled.Encodings;

/**
 *
* @author  Weihong Li
 */
public class Mp3Creator extends javax.swing.JDialog implements Runnable{
    private JFileChooser chooser;
    private String wavFileName;
    private String optQuality = "middle";
    private String optBitRate = "128";
    private  boolean notDone = true;
    private  boolean startWriting = false;
    private String textAreaStr = "";
    private Thread mp3Thread = null;
    
    
    /** Creates new form Mp3Creator */
    public Mp3Creator(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        chooser = ((VCPlayer)parent).getFC();
        initComponents();
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        buttonGroup1.add(jRadioButton3);
        buttonGroup1.add(jRadioButton4);
        buttonGroup1.add(jRadioButton5);
        setLocation(200,200);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.BorderLayout(10, 10));

        setTitle("Generate Mp3 file from Wav file");
        setName("mp3Dialog");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel1.setText("The Wave File:");
        jPanel1.add(jLabel1);

        jTextField1.setText("C:\\Windows\\Media\\Windows XP Startup.wav");
        jTextField1.setPreferredSize(new java.awt.Dimension(222, 22));
        jPanel1.add(jTextField1);

        jButton1.setText("Browser");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout(10, 10));

        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setToolTipText("Show the convertion information.");
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(80);
        jTextArea1.setFont(new java.awt.Font("Courier New", 1, 12));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(8);
        jTextArea1.setPreferredSize(new java.awt.Dimension(560, 144));
        jPanel3.add(jTextArea1);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        jLabel2.setText("Quality:");
        jPanel6.add(jLabel2);

        jPanel4.add(jPanel6);

        jPanel7.setLayout(new java.awt.GridLayout(5, 1));

        jRadioButton1.setText("lowest");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jPanel7.add(jRadioButton1);

        jRadioButton2.setText("low");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jPanel7.add(jRadioButton2);

        jRadioButton3.setSelected(true);
        jRadioButton3.setText("middle");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jPanel7.add(jRadioButton3);

        jRadioButton4.setText("high");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jPanel7.add(jRadioButton4);

        jRadioButton5.setText("highest");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jPanel7.add(jRadioButton5);

        jPanel4.add(jPanel7);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Bit Rate:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel8.add(jLabel3, gridBagConstraints);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("128");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel8.add(jLabel4, gridBagConstraints);

        jSlider1.setMaximum(13);
        jSlider1.setToolTipText("Please select the bit rate.");
        jSlider1.setValue(8);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel8.add(jSlider1, gridBagConstraints);

        jPanel4.add(jPanel8);

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        jButton2.setText("Convert");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton2);

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton3);

        jPanel2.add(jPanel5, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        jTextArea1.setText("");

        mp3Thread = new Thread(this);
        mp3Thread.setDaemon(false);
        mp3Thread.start();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Add your handling code here:
        closeDialog(null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        // Add your handling code here:
        optQuality = "highest";        
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // Add your handling code here:
        optQuality = "high";        
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // Add your handling code here:
        optQuality = "middle";        
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // Add your handling code here:
        optQuality = "low";        
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // Add your handling code here:
        optQuality = "lowest";
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // Add your handling code here:
        int bitRateIndex = jSlider1.getValue();
        switch (bitRateIndex) {
            case 0: optBitRate = "32";
                break;
            case 1: optBitRate = "40";
                break;
            case 2: optBitRate = "48";
                break;
            case 3: optBitRate = "56";
                break;
            case 4: optBitRate = "64";
                break;
            case 5: optBitRate = "80";
                break;
            case 6: optBitRate = "96";
                break;
            case 7: optBitRate = "112";
                break;
            case 8: optBitRate = "128";
                break;
            case 9: optBitRate = "160";
                break;
            case 10: optBitRate = "192";
                break;
            case 11: optBitRate = "224";
                break;
            case 12: optBitRate = "256";
                break;
            case 13: optBitRate = "320";
                break;
        }
        jLabel4.setText(optBitRate);
        
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:\
        chooser.setDialogTitle("Click on the Wave File");
        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension("wav");
        filter.setDescription("Audio");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            wavFileName = chooser.getSelectedFile().getPath();
            jTextField1.setText(wavFileName);
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new Mp3Creator(new javax.swing.JFrame(), true).show();
    }
    
    public void run() {
        String [] args = {"-q",optQuality, "-b", optBitRate, wavFileName }; 
        textAreaStr = "File: " + wavFileName;
        jTextArea1.setText(textAreaStr);
        System.out.println("THE MP3THREAD PRIORITY IS:" + mp3Thread.getPriority());
        new Mp3Encoder(args);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    // Define the Mp3Encoder Class
    public class Mp3Encoder implements Runnable{
	private  boolean DEBUG = false;
	private  boolean dumpExceptions=false;
	private  boolean traceConverters=false;
	private  boolean quiet=false;

	// currently, there is no convenient method in Java Sound to specify non-standard Encodings.
	// using tritonus' proposal to overcome this.
	private  final AudioFormat.Encoding	MPEG1L3 = Encodings.getEncoding("MPEG1L3");
	private  final AudioFileFormat.Type	MP3 = AudioFileTypes.getType("MP3", "mp3");



	private  AudioInputStream getInStream(String filename)
			throws IOException {
		File	file = new File(filename);
		AudioInputStream	ais = null;
		try {
			ais = AudioSystem.getAudioInputStream(file);
		} catch (Exception e) {
			if (dumpExceptions) {
				e.printStackTrace();
			} else if (!quiet) {
				System.out.println("Error: " + e.getMessage());
			}
		}
		if (ais == null) {
			throw new IOException("Cannot open \"" + filename + "\"");
		}
		return ais;
	}



	public  String stripExtension(String filename) {
		int	ind = filename.lastIndexOf(".");
		if (ind == -1
		        || ind == filename.length()
		        || filename.lastIndexOf(File.separator) > ind) {
			// when dot is at last position,
			// or a slash is after the dot, there isn't an extension
			return filename;
		}
		return filename.substring(0, ind);
	}



	/* first version. Remains here for documentation how to
	 * get a stream with complete description of the target format.
	 */
	public  AudioInputStream getConvertedStream2(
	    	AudioInputStream sourceStream,
	    	AudioFormat.Encoding targetEncoding)
			throws Exception {
		AudioFormat sourceFormat = sourceStream.getFormat();
		if (!quiet) {
			System.out.println("Input format: " + sourceFormat);
                        textAreaStr += "Input format: " + sourceFormat;
		}
		// build the output format
		AudioFormat targetFormat = new AudioFormat(
		                               targetEncoding,
		                               sourceFormat.getSampleRate(),
		                               AudioSystem.NOT_SPECIFIED,
		                               sourceFormat.getChannels(),
		                               AudioSystem.NOT_SPECIFIED,
		                               AudioSystem.NOT_SPECIFIED,
		                               false); // endianness doesn't matter
		// construct a converted stream
		AudioInputStream targetStream = null;
		if (!AudioSystem.isConversionSupported(targetFormat, sourceFormat)) {
			if (DEBUG && !quiet) {
				System.out.println("Direct conversion not possible.");
				System.out.println("Trying with intermediate PCM format.");
			}
			AudioFormat intermediateFormat = new AudioFormat(
			                                     AudioFormat.Encoding.PCM_SIGNED,
			                                     sourceFormat.getSampleRate(),
			                                     16,
			                                     sourceFormat.getChannels(),
			                                     2 * sourceFormat.getChannels(), // frameSize
			                                     sourceFormat.getSampleRate(),
			                                     false);
			if (AudioSystem.isConversionSupported(intermediateFormat, sourceFormat)) {
				// intermediate conversion is supported
				sourceStream = AudioSystem.getAudioInputStream(intermediateFormat, sourceStream);
			}
		}
		targetStream = AudioSystem.getAudioInputStream(targetFormat, sourceStream);
		if (targetStream == null) {
			throw new Exception("conversion not supported");
		}
		if (!quiet) {
			if (DEBUG) {
				System.out.println("Got converted AudioInputStream: " + targetStream.getClass().getName());
			}
		}
		return targetStream;
	}



	public  AudioInputStream getConvertedStream(
	    	AudioInputStream sourceStream,
	    	AudioFormat.Encoding targetEncoding)
			throws Exception {
		AudioFormat sourceFormat = sourceStream.getFormat();
		if (!quiet) {
			System.out.println("Input format: " + sourceFormat);
                        textAreaStr += "\nInput format: " + sourceFormat;
		}

		// construct a converted stream
		AudioInputStream targetStream = null;
		if (!AudioSystem.isConversionSupported(targetEncoding, sourceFormat)) {
			if (DEBUG && !quiet) {
				System.out.println("Direct conversion not possible.");
				System.out.println("Trying with intermediate PCM format.");
			}
			AudioFormat intermediateFormat = new AudioFormat(
			                                     AudioFormat.Encoding.PCM_SIGNED,
			                                     sourceFormat.getSampleRate(),
			                                     16,
			                                     sourceFormat.getChannels(),
			                                     2 * sourceFormat.getChannels(), // frameSize
			                                     sourceFormat.getSampleRate(),
			                                     false);
			if (AudioSystem.isConversionSupported(intermediateFormat, sourceFormat)) {
				// intermediate conversion is supported
				sourceStream = AudioSystem.getAudioInputStream(intermediateFormat, sourceStream);
			}
		}
		targetStream = AudioSystem.getAudioInputStream(targetEncoding, sourceStream);
		if (targetStream == null) {
			throw new Exception("conversion not supported");
		}
		if (!quiet) {
			if (DEBUG) {
				System.out.println("Got converted AudioInputStream: " + targetStream.getClass().getName());
			}
		}
		return targetStream;
	}



	public  int writeFile(String inFilename) {
		int writtenBytes = -1;
		try {
			AudioFileFormat.Type targetType = MP3;
			AudioInputStream ais = getInStream(inFilename);
			ais = getConvertedStream(ais, MPEG1L3);

			// construct the target filename
			String outFilename = stripExtension(inFilename) + "." + targetType.getExtension();

			// write the file
			if (!quiet) {
				System.out.println("Writing " + outFilename + "\nPlease waiting ...  ");
                                textAreaStr += "\nWriting " + outFilename + "\nPlease waiting ...  ";
                                startWriting = true;
			}
                        
			writtenBytes = AudioSystem.write(ais, targetType, new File(outFilename));
			if (DEBUG && !quiet) {
				System.out.println("Effective parameters of output file:");
				try {
					String version=System.getProperty("tritonus.lame.encoder.version", "");
					if (version!="") {
						System.out.println("  Version      = "+version);
					}
					System.out.println("  Quality      = "+System.getProperty
					                   ("tritonus.lame.effective.quality", "<none>"));
					System.out.println("  Bitrate      = "+System.getProperty
					                   ("tritonus.lame.effective.bitrate", "<none>"));
					System.out.println("  Channel Mode = "+System.getProperty
					                   ("tritonus.lame.effective.chmode", "<none>"));
					System.out.println("  VBR mode     = "+System.getProperty
					                   ("tritonus.lame.effective.vbr", "<none>"));
					System.out.println("  Sample rate  = "+System.getProperty
					                   ("tritonus.lame.effective.samplerate", "<none>"));
					System.out.println("  Encoding     = "+System.getProperty
					                   ("tritonus.lame.effective.encoding", "<none>"));
				} catch (Throwable t1) {}
			}
		} catch (Throwable t) {
			if (dumpExceptions) {
				t.printStackTrace();
			} else if (!quiet) {
				System.out.println("Error: " + t.getMessage());
			}
		}
		return writtenBytes;
	}



	// returns the first index in args where the files start
	public  int parseArgs(String[] args) {
		if (args.length == 0) {
			usage();
		}
		// parse options
		try {
			for (int i = 0; i < args.length; i++) {
				String arg = args[i];
				if (arg.equals("--help")) {
					usage();
				}
				if (arg.length() > 3 || arg.length() < 2 || !arg.startsWith("-")) {
					return i;
				}
				char cArg = arg.charAt(1);
				// options without parameter
				if (cArg == 'v') {
					DEBUG=true;
					continue;
				} else if (cArg == 'e') {
					dumpExceptions=true;
					continue;
				} else if (cArg == 't') {
					org.tritonus.share.TDebug.TraceAudioConverter=true;
					continue;
				} else if (cArg == 's') {
					quiet=true;
					continue;
				} else if (cArg == 'V') {
					try {
						System.setProperty("tritonus.lame.vbr", "true");
					} catch (Throwable t1) {}
					continue;
				} else if (cArg == 'h') {
					usage();
				}
				// options with parameter
				if (args.length < i + 2) {
					throw new Exception("Missing parameter or unrecognized option "+arg+".");
				}
				String param = args[i + 1];
				i++;
				switch (cArg) {
				case 'q':
					try {
						System.setProperty("tritonus.lame.quality", param);
					} catch (Throwable t2) {}
					break;
				case 'b':
					try {
						System.setProperty("tritonus.lame.bitrate", param);
					} catch (Throwable t3) {}
					break;
				default:
					throw new Exception("Unrecognized option "+arg+".");
				}
			}
			throw new Exception("No input file(s) are given.");
		} catch (Exception e) {
			System.err.println(e.getMessage());
			System.exit(1);
		}
		return 0; // statement not reached
	}


        public void run() {

            boolean switchChar = true;
            notDone = true;
            while (notDone)
            {
                if (startWriting == false)
                {
                    jTextArea1.setText(textAreaStr);
                }else 
                {
                    if (switchChar)
                        textAreaStr = textAreaStr.substring(0,textAreaStr.length()-1) + "/";
                    else textAreaStr = textAreaStr.substring(0,textAreaStr.length()-1) + "\\";
                    switchChar = !switchChar;
                    
                    jTextArea1.setText(textAreaStr);
                }

                try {
                    Thread.sleep(1000);
                }catch (Exception e) {
                    jTextArea1.setText("Sleep Error" + e.getMessage());
                }
            }
            
            startWriting = false;

            
        }

	public Mp3Encoder(String[] args) {
		//try {
		//	System.out.println("Librarypath=" + System.getProperty("java.library.path", ""));
		//} catch (Throwable t) {}

                Thread mp3EncoderThread = new Thread(this);
                mp3EncoderThread.setPriority(Thread.MAX_PRIORITY);
                System.out.println("THE MP3ENCODER THREAD PRIORITY IS:" + mp3EncoderThread.getPriority());
                mp3EncoderThread.start();
                
		int firstFileIndex = parseArgs(args);
		int inputFiles = 0;
		int success = 0;
		long totalTime = System.currentTimeMillis();
		for (int i = firstFileIndex; i < args.length; i++) {
			long time = System.currentTimeMillis();
			int bytes = writeFile(args[i]);
			time = System.currentTimeMillis()-time;
			inputFiles++;
			if (bytes >= 0) {
				if (bytes > 0) {
					success++;
				}
				if (!quiet) {
					System.out.println("Wrote " + bytes + " bytes in "
					                   + (time / 60000) + "m " + ((time/1000) % 60) + "s "
					                   + (time % 1000) + "ms ("
					                   + (time/1000) + "s).");
                                        textAreaStr += "\nWrote " + bytes + " bytes in "
					                   + (time / 60000) + "m " + ((time/1000) % 60) + "s "
					                   + (time % 1000) + "ms ("
					                   + (time/1000) + "s).";
				}
			}
		}
		totalTime = System.currentTimeMillis() - totalTime;
		if ((DEBUG && quiet) || !quiet) {
			// this IS displayed in silent DEBUG mode
			System.out.println("From " + inputFiles + " input file" + (inputFiles == 1 ? "" : "s") + ", "
			                   + success + " file" + (success == 1 ? " was" : "s were") + " converted successfully in "
			                   + (totalTime / 60000) + "m " + ((totalTime/1000) % 60) + "s  ("
			                   + (totalTime/1000) + "s).");
                        textAreaStr += "\nFrom " + inputFiles + " input file" + (inputFiles == 1 ? "" : "s") + ", "
			                   + success + " file" + (success == 1 ? " was" : "s were") + " converted successfully in "
			                   + (totalTime / 60000) + "m " + ((totalTime/1000) % 60) + "s  ("
			                   + (totalTime/1000) + "s).";
                        jTextArea1.setText(textAreaStr);
		}
                notDone = false;
	}



	/**	Display a message of how to call this program.
	 */
	public  void usage() {
		System.out.println("Mp3Encoder - convert audio files to mp3 (layer III of MPEG 1, MPEG 2 or MPEG 2.5");
		System.out.println("java Mp3Encoder <options> <source file> [<source file>...]");
		System.out.println("The output file(s) will be named like the source file(s) but");
		System.out.println("with mp3 file extension.");
		System.out.println("");
		System.out.println("You need LAME 3.88 or later. Get it from http://sourceforge.net/projects/lame/");
		System.out.println("");
		System.out.println("<options> may be a combination of the following:");
		System.out.println("-q <quality>  Quality of output mp3 file. In VBR mode, this affects");
		System.out.println("              the size of the mp3 file. (Default middle)");
		System.out.println("              One of: lowest, low, middle, high, highest");
		System.out.println("-b <bitrate>  Bitrate in KBit/s. Useless in VBR mode. (Default 128)");
		System.out.println("              One of: 32 40 48 56 64 80 96 112 128 160 192 224 256 320 (MPEG1)");
		System.out.println("              Or: 8 16 24 32 40 48 56 64 80 96 112 128 144 160 (MPEG2 and MPEG2.5");
		System.out.println("-V            VBR (variable bit rate) mode. Slower, but potentially better");
		System.out.println("              quality. (Default off)");
		System.out.println("-v            Be verbose.");
		System.out.println("-s            Be silent.");
		System.out.println("-e            Debugging: Dump stack trace of exceptions.");
		System.out.println("-t            Debugging: trace execution of converters.");
		System.out.println("-h | --help   Show this message.");
		System.exit(1);
	}
        
    }
    
}


